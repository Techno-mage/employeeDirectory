{"version":3,"sources":["logo.svg","components/header.js","utils/API.js","components/Entry.js","components/Directory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","axios","get","Entry","props","src","image","alt","name","email","phone","Directory","state","results","search","display","sort","toggleSort","setState","handleInputChange","event","target","value","filter","e","f","first","l","last","q","startsWith","console","log","API","then","res","data","catch","err","this","map","item","picture","medium","onChange","type","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,mHCQ5BC,MANf,WACI,OAAQ,mD,wDCCG,EACC,WACZ,OAAOC,IAAMC,IACT,kDCMOC,MAXf,SAAeC,GACb,OACE,4BACA,4BAAI,yBAAKC,IAAKD,EAAME,MAAOC,IAAKH,EAAMI,QACtC,4BAAKJ,EAAMI,MACX,4BAAKJ,EAAMK,OACX,4BAAKL,EAAMM,SCwGAC,E,4MA3GXC,MAAQ,CACJC,QAAS,GACTC,OAAQ,GACRC,QAAS,GACTC,KAAM,Q,EASVC,WAAa,WACe,SAApB,EAAKL,MAAMI,KACX,EAAKE,SAAS,CAACF,KAAM,SAErB,EAAKE,SAAS,CAACF,KAAM,U,EAI7BG,kBAAoB,SAAAC,GAAU,IAAD,IAEDA,EAAMC,OAAtBb,EAFiB,EAEjBA,KAAMc,EAFW,EAEXA,MAGd,EAAKJ,UAAL,mBACKV,EAAOc,GADZ,wBAEa,EAAKV,MAAMC,QAAQU,QAAO,SAACC,GAChC,IAAIC,EAAID,EAAEhB,KAAKkB,MACXC,EAAIH,EAAEhB,KAAKoB,KAEXC,EAAIP,EACR,OAFYG,EAAG,IAAKE,GAERG,WAAWD,IAAMJ,EAAEK,WAAWD,IAAMF,EAAEG,WAAWD,OAPrE,IAWA,EAAKX,SAAS,IAIda,QAAQC,IAAI,EAAKpB,MAAMG,U,kEAlCN,IAAD,OAChBkB,IACKC,MAAK,SAAAC,GAAG,OAAI,EAAKjB,SAAS,CAAEL,QAASsB,EAAIC,KAAKvB,QAASE,QAASoB,EAAIC,KAAKvB,aACzEwB,OAAM,SAAAC,GAAG,OAAIP,QAAQC,IAAIM,Q,uCA+C9BC,KAAK3B,MAAMC,QAAQ2B,KAAI,SAACC,GAAD,OACnB,kBAAC,EAAD,CACInC,MAAOmC,EAAKC,QAAQC,OACpBnC,KAAMiC,EAAKjC,KAAKkB,MAAQ,IAAMe,EAAKjC,KAAKoB,KACxCnB,MAAOgC,EAAKhC,MACZC,MAAO+B,EAAK/B,a,+BAMpB,OACI,6BACI,2BACIY,MAAOiB,KAAK3B,MAAME,OAClBN,KAAK,SACLoC,SAAUL,KAAKpB,kBACf0B,KAAK,SAGT,+BACKd,QAAQC,IAAIO,KAAK3B,MAAME,QACxB,+BACI,4BACI,qCACA,qCACA,qCACA,uCAQRyB,KAAK3B,MAAMG,QAAQyB,KAAI,SAACC,GAAD,OACnB,kBAAC,EAAD,CACInC,MAAOmC,EAAKC,QAAQC,OACpBnC,KAAMiC,EAAKjC,KAAKkB,MAAQ,IAAMe,EAAKjC,KAAKoB,KACxCnB,MAAOgC,EAAKhC,MACZC,MAAO+B,EAAK/B,iB,GAlGhBoC,aCWTC,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.0fe2c4c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction Header() {\r\n    return (<h1>Employee Directory</h1>\r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import axios from \"axios\";\r\n\r\n// Export an object containing methods we'll use for accessing the GitHub Jobs API\r\n\r\nexport default {\r\n  getEmployees: function() {\r\n    return axios.get(\r\n        \"https://randomuser.me/api/?results=200&nat=us\"\r\n    );\r\n  }\r\n};","import React from \"react\";\r\n\r\nfunction Entry(props) {\r\n  return (\r\n    <tr>\r\n    <th><img src={props.image} alt={props.name} /></th>\r\n    <th>{props.name}</th>\r\n    <th>{props.email}</th>\r\n    <th>{props.phone}</th>\r\n</tr>\r\n  )\r\n}\r\n\r\nexport default Entry;","import React, { Component } from 'react';\r\nimport API from \"../utils/API\";\r\nimport Entry from \"./Entry\";\r\n\r\nclass Directory extends Component {\r\n    state = {\r\n        results: [],\r\n        search: \"\",\r\n        display: [],\r\n        sort: \"none\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        API.getEmployees()\r\n            .then(res => this.setState({ results: res.data.results, display: res.data.results }))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    toggleSort = () => {\r\n        if (this.state.sort === \"desc\"){\r\n            this.setState({sort: \"asen\"})\r\n        } else(\r\n            this.setState({sort: \"desc\"})\r\n        )\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        // Getting the value and name of the input which triggered the change\r\n        const { name, value } = event.target;\r\n\r\n        // Updating the input's state\r\n        this.setState({\r\n            [name]: value,\r\n            display: this.state.results.filter((e)=>{\r\n                var f = e.name.first\r\n                var l = e.name.last\r\n                var name =  f+ \" \" +l;\r\n                var q = value\r\n                return name.startsWith(q) || f.startsWith(q) || l.startsWith(q)\r\n            })\r\n        });\r\n\r\n        this.setState({\r\n            \r\n        })\r\n\r\n        console.log(this.state.display)\r\n\r\n\r\n\r\n        \r\n    };\r\n\r\n    displayEntries() {\r\n        // if(this.state.results[0]) return <Entry \r\n        //     image={this.state.results[0].picture.medium} \r\n        //     name={this.state.results[0].name.first +\" \" + this.state.results[0].name.last} \r\n        //     email={this.state.results[0].email} \r\n        //     phone={this.state.results[0].phone} \r\n        //     /> \r\n\r\n\r\n        this.state.results.map((item) => (\r\n            <Entry\r\n                image={item.picture.medium}\r\n                name={item.name.first + \" \" + item.name.last}\r\n                email={item.email}\r\n                phone={item.phone}\r\n            />\r\n        ))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input\r\n                    value={this.state.search}\r\n                    name=\"search\"\r\n                    onChange={this.handleInputChange}\r\n                    type=\"text\"\r\n                    \r\n                />\r\n                <table>\r\n                    {console.log(this.state.search)}\r\n                    <thead>\r\n                        <tr>\r\n                            <th>image</th>\r\n                            <th>Name </th>\r\n                            <th>Email</th>\r\n                            <th>Phone</th>\r\n                        </tr>\r\n\r\n        \r\n            </thead>\r\n\r\n                    {\r\n                    \r\n                    this.state.display.map((item) => (\r\n                        <Entry\r\n                            image={item.picture.medium}\r\n                            name={item.name.first + \" \" + item.name.last}\r\n                            email={item.email}\r\n                            phone={item.phone}\r\n                        />))}\r\n\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Directory;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from \"./components/header\";\nimport Directory from \"./components/Directory\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Directory/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}